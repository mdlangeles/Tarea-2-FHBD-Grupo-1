# ================== CONFIG COMUNES ==================
x-spark-common: &spark-common
  image: spark:3.5.3-scala2.12-java17-python3-ubuntu
  volumes:
    - ./jobs:/op t/spark/work-dir/jobs
  networks:
    - data-stack


x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: Dockerfile.airflow
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres:5432/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  networks:
    - data-stack
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy

# ================== STACK DE DATOS ==================
services:

  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: jupyter_notebook_fhbd_1
    image: custom-jupyter:latest
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/workspace
      - ./dlt:/workspace/.dlt
      - ./StackOverflowData:/data/StackOverflowData #AquÃ­ definir bien el volumen individualmente
    environment:
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
    networks:
      - data-stack
    command: >
      bash -c "
      jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root
      --NotebookApp.token='' --NotebookApp.password=''
      --notebook-dir=/workspace
      "

  minio:
    image: minio/minio
    container_name: minio_fhbd_1
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_REGION=us-east-1
    volumes:
      - ./minio-data:/data
    entrypoint: >
      /bin/sh -c "
      minio server /data --console-address ':9001' &
      sleep 10;
      mc alias set myminio http://localhost:9000 admin password;
      mc mb myminio/mybucket --ignore-existing;
      tail -f /dev/null
      "
    networks:
      - data-stack

  nessie:
    image: ghcr.io/projectnessie/nessie:0.99.0
    container_name: nessie_fhbd_1
    environment:
      - nessie.version.store.type=IN_MEMORY
      - nessie.catalog.default-warehouse=warehouse
      - nessie.catalog.warehouses.warehouse.location=s3://mybucket/
      - nessie.catalog.service.s3.default-options.endpoint=http://minio:9000/
      - nessie.catalog.service.s3.default-options.access-key=urn:nessie-secret:quarkus:nessie.catalog.secrets.access-key
      - nessie.catalog.service.s3.default-options.secret-key=urn:nessie-secret:quarkus:nessie.catalog.secrets.secret-key
      - nessie.catalog.service.s3.default-options.auth-type=STATIC
      - nessie.catalog.secrets.access-key.name=admin
      - nessie.catalog.secrets.secret-key.secret=password
      - nessie.catalog.service.s3.default-options.region=us-east-1
      - nessie.server.authentication.enabled=false
    volumes:
      - ./nessie-data:/nessie/data
    ports:
      - "19120:19120"
    networks:
      - data-stack

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse_fhbd_1
    ports:
      - "8123:8123"
      - "9002:9000"
    environment:
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=default
    volumes:
      - /var/lib/clickhouse
    networks:
      - data-stack

  spark-master:
    <<: *spark-common
    container_name: spark_master_fhbd_1
    hostname: spark-master
    command: ["/opt/spark/bin/spark-class","org.apache.spark.deploy.master.Master","--host","spark-master"]
    ports:
      - "9090:8080"
      - "7077:7077"
    environment:
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password

  spark-worker:
    <<: *spark-common
    container_name: spark_worker_fhbd_1
    hostname: spark-worker
    depends_on:
      - spark-master
    command: ["/opt/spark/bin/spark-class","org.apache.spark.deploy.worker.Worker","spark://spark-master:7077"]
    environment:
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=1g
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
    ports:
      - "8081:8081"

  dremio:
    platform: linux/x86_64
    image: dremio/dremio-oss:latest
    container_name: dremio_data_stack_FHBD
    ports:
      - "9047:9047"
      - "31010:31010"
      - "32010:32010"
    environment:
      - DREMIO_JAVA_SERVER_EXTRA_OPTS=-Dpaths.dist=file:///opt/dremio/data/dist
    networks:
      - data-stack
  trino:
    image: trinodb/trino:latest
    container_name: trino_fhbd_1
    ports:
      - "8181:8080"
    networks:
      - data-stack
    volumes:
      - ./trino/catalog:/etc/trino/catalog
      - ./trino/config:/etc/trino/config
      - ./trino/auth:/etc/trino/auth
    environment:
      # ðŸ‘‡ definimos credenciales aquÃ­ y las inyectamos en los archivos
      TRINO_USER: admin
      TRINO_PASSWORD: password

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - data-stack

  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - data-stack

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    healthcheck:
      test:
        - "CMD-SHELL"
        - >
          celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@${HOSTNAME}"
          || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@${HOSTNAME}"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    restart: always
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /opt/airflow/{logs,dags,plugins,config}
        chown -R "${AIRFLOW_UID:-50000}:0" /opt/airflow/{logs,dags,plugins,config}
        /entrypoint airflow db migrate
        /entrypoint airflow users create \
          --username admin \
          --password admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com
    user: "0:0"

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - "5555:5555"
    restart: always
    networks:
      - data-stack

volumes:
  postgres-db-volume:

networks:
  data-stack:
    driver: bridge
